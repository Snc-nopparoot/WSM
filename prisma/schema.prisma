// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  name              String
  password          String
  role              String
  taskAssignments   TaskAssignment[]
  progressUpdates   ProgressUpdate[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
}

model Project {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(100)
  description      String?
  startDate        DateTime          @db.Date
  endDate          DateTime?         @db.Date
  status           String            @db.VarChar(50)
  phases           Phase[]
  milestones       Milestone[]
  scheduleChanges  ScheduleChange[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
}

model Phase {
  id          Int       @id @default(autoincrement())
  projectId   Int
  name        String    @db.VarChar(100)
  description String?
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  status      String    @db.VarChar(50)
  project     Project   @relation(fields: [projectId], references: [id])
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Task {
  id              Int               @id @default(autoincrement())
  phaseId         Int
  name            String            @db.VarChar(255)
  description     String?
  startDate       DateTime          @db.Date
  dueDate         DateTime          @db.Date
  actualEndDate   DateTime?         @db.Date
  status          String            @db.VarChar(50)
  priority        String?           @db.VarChar(20)
  estimatedHours  Float?
  phase           Phase             @relation(fields: [phaseId], references: [id])
  assignments     TaskAssignment[]
  progressUpdates ProgressUpdate[]
  scheduleChanges ScheduleChange[]
  predecessorDependencies TaskDependency[] @relation("PredecessorTask")
  successorDependencies   TaskDependency[] @relation("SuccessorTask")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model TaskAssignment {
  id           Int      @id @default(autoincrement())
  taskId       Int
  userId       Int
  assignedDate DateTime @db.Date
  role         String?  @db.VarChar(50)
  task         Task     @relation(fields: [taskId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model ProgressUpdate {
  id                 Int      @id @default(autoincrement())
  taskId             Int
  userId             Int
  updateDate         DateTime @default(now())
  description        String?
  percentageComplete Int?
  hoursSpent         Float?
  task               Task     @relation(fields: [taskId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?
}

model Milestone {
  id          Int      @id @default(autoincrement())
  projectId   Int
  name        String   @db.VarChar(100)
  description String?
  dueDate     DateTime @db.Date
  status      String   @db.VarChar(50)
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model ScheduleChange {
  id            Int       @id @default(autoincrement())
  projectId     Int
  taskId        Int?
  changeDate    DateTime  @default(now())
  description   String?
  oldStartDate  DateTime? @db.Date
  newStartDate  DateTime? @db.Date
  oldDueDate    DateTime? @db.Date
  newDueDate    DateTime? @db.Date
  reason        String?
  project       Project   @relation(fields: [projectId], references: [id])
  task          Task?     @relation(fields: [taskId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model TaskDependency {
  id                  Int    @id @default(autoincrement())
  predecessorTaskId   Int
  successorTaskId     Int
  dependencyType      String @db.VarChar(50)
  predecessorTask     Task   @relation("PredecessorTask", fields: [predecessorTaskId], references: [id])
  successorTask       Task   @relation("SuccessorTask", fields: [successorTaskId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
}